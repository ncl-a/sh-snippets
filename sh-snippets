{
	"Parameters greater than": {
		"prefix": "paramsgreaterthen",
		"body": [
			"# controllo lasco sui parametri",
			"if test \\$# -lt $1; then",
			"\techo \"E: i parametri devono essere almeno $1\"",
			"\texit 1",
			"fi"
		]
	},

	"Parameters equals to": {
		"prefix": "paramsequalsto",
		"body": [
			"# controllo stringente sui parametri",
			"if test \\$# -ne $1; then",
			"\techo \"E: i parametri devono essere $1\"",
			"\texit 1",
			"fi"
		]
	},

	"Check number": {
		"prefix": "checknum",
		"body": [
			"# controllo che il valore sia un numero",
			"case $1 in",
			"\t*[!0-9]*)",
			"\t\techo \"E: $1 deve essere un numero\"",
			"\t\texit 1",
			"\t\t;;",
			"\t*)",
			"\t\tif test $1 -eq 0; then",
			"\t\t\techo \"E: $1 non può essere 0\"",
			"\t\t\texit 1",
			"\t\tfi",
			"",
			"\t\t$2",
			"",
			"\t\t;;",
			"esac"
		]
	},

	"Check path": {
		"prefix": "checkpath",
		"body": [
			"# controllo che il valore sia un percorso valido",
			"case $1 in",
			"\t/*)",
			"\t\t# $1 è un percorso assoluto",
			"",
			"\t\t$2",
			"",
			"\t\t;;",
			"\t*/*)",
			"\t\t# $1 è un percorso relativo",
			"",
			"\t\t$3",
			"",
			"\t\t;;",
			"\t*)",
			"\t\t# per esclusione $1 è un percorso relativo semplice",
			"",
			"\t\t$4",
			"",
			"\t\t;;",
			"esac"
		]
	},

	"Check one char": {
		"prefix": "checkchar",
		"body": [
			"# controllo che il valore sia un singolo carattere",
			"case $1 in",
			"\t?)",
			"\t\t$2",
			"",
			"\t\t;;",
			"\t*)",
			"\t\techo \"E: $1 deve essere un singolo carattere\"",
			"\t\texit 1",
			"\t\t;;",
			"esac"
		]
	},

	"Check only minusc": {
		"prefix": "checkonlymin",
		"body": [
			"# controllo che ci siano solo caratteri",
			"case `cat < ${1:\\$file}` in",
			"*[!a-z]*)",
			"\t$2",
			"\t;;",
			"*)",
			"\t$3",
			"\t;;",
			"esac"
		]
	},

	"Check num in all lines": {
		"prefix": "checknuminlines",
		"body": [
			"# controllo che il numero di linee con un numero sia uguale al numero di linee del file",
			"if test `grep [0-9] $1 | wc -l` -eq `wc -l < $1`; then\t\t# wc -l conta gli \n... aggiungi 1 per il numero vero di linee",
			"\t$0",
			"fi"
		]
	},

	"Check if there is a num": {
		"prefix": "checkthereisnum",
		"body": [
			"if test `grep [0-9] < $1 > /dev/null | wc -l` -gt 0; then",
			"\t$0",
			"fi"
		]
	},

	"Check num of lines": {
		"prefix": "checkNlines",
		"body": [
			"if test `wc -l < $1` $2 $3; then",
			"\t$0",
			"fi"
		]
	},


	"Export pwd": {
		"prefix": "exportpwd",
		"body": [
			"# esporto la directory corrente",
			"PATH=`pwd`:\\$PATH",
			"export PATH"
		]
	},

	"Shabang": {
		"prefix": "shabang",
		"body": [
			"#!/bin/sh"
		]
	},

	"Go in subdirectory": {
		"prefix": "subdir",
		"body": [
			"for file in *; do\t# scorro tutti i file presenti nella cartella corrente",
			"\tif test -d \\$file -a -x \\$file; then\t# verifico siano una directory e che sia traversabile",
			"",
			"\t\t\\$0 ${1:\\$fileTmp}",
			"\tfi",
			"",
			"done"
		]
	},

	"For file": {
		"prefix": "forfile",
		"body": [
			"for file in *; do",
			"\tif test -f \\$file -a -r \\$file; then",
			"\t\t$1",
			"\tfi",
			"done"
		]
	},

	"For dir": {
		"prefix": "fordir",
		"body": [
			"for file in *; do",
			"\tif test -d \\$file -a -x \\$file; then",
			"\t\t$1",
			"\tfi",
			"done"
		]
	},

	"Get line": {
		"prefix": "getline",
		"body": [
			"theLine=`head -n ${1:10} < ${2:\\$file} | tail -n 1`"
		]
	},

	"Read num": {
		"prefix": "readnum",
		"body": [
			"# continuo a chiedere un numero all'utente fin quando esso non rispetta le richieste",
			"while test 1 -eq 1; do",
			"",
			"\techo -n \"Inserisci qui il numero: \"",
			"\tread ${1:num}",
			"",
			"\tcase \\$${1:num} in",
			"\t\t*[!0-9]*)",
			"\t\t\techo \"E: \\$${1:num} deve essere un numero\"",
			"\t\t\tcontinue",
			"\t\t\t;;",
			"\t\t*)",
			"\t\t\tif test \\$${1:num} -eq 0; then",
			"\t\t\t\techo \"E: \\$${1:num} non può essere 0\"",
			"\t\t\t\tcontinue",
			"\t\t\tfi",
			"",
			"",
			"\t\t\t$2",
			"",
			"",
			"\t\t\tbreak",
			"\t\t\t;;",
			"\tesac",
			"done"
		]
	},

	"Create tmp file": {
		"prefix": "createtmpfile",
		"body": [
			"fileTmp=\"/tmp/fileTmp\\$$\"",
			"> \\$fileTmp\t# creo e azzero il file temporaneo"
		]
	},

	"Create FRC count lv": {
		"prefix": "createFCRcountLV",
		"body": [
			"#!/bin/sh",
			"",
			"fileTmp=\\$1\t  # file temporaneo",
			"G=\\$2\t\t\t# path gerarchia",
			"LV=\\$3\t\t   # (int) livello corrente, quando si richiama il file FCR dovrebbe essere passato come il livello da cui far partire il conteggio della gerarchia",
			"DO=\\$4\t\t   # (int) selettore di livello, faccio qualcosa se arrivo a questo livello",
			"",
			"cd \\$G",
			"",
			"",
			"fileWithLV=\\$fileTmp\t # file da usare per memorizzare il livello massimo della gerarchia",
			"",
			"# ======= calcolo e salvataggio del livello nella gerarchia =====",
			"nFile=0",
			"nDir=0",
			"for element in *; do\t\t# conto il numero di file e dir in G",
			"\t",
			"\tif test -f \\$element; then",
			"\t\tnFile=`expr \\$nFile + 1`",
			"\tfi",
			"",
			"\tif test -d \\$element -a -x \\$element; then",
			"\t\tnDir=`expr \\$nDir + 1`",
			"\tfi",
			"done",
			"",
			"if test \\$nDir -eq 0; then",
			"\t",
			"\tif test \\$nFile -eq 0; then\t  # se non trovo file non vale come livello",
			"\t\tLV=`expr \\$LV - 1`\t   # posso manipolare LV in quanto sono sicuro che non si sono directory",
			"\tfi",
			"",
			"\tread memLV < \\$fileWithLV",
			"",
			"\t# se il mumero di livelli della gerarchia corrente è maggiore",
			"\t# di quelli già memorizzati sovrascrivo",
			"\tif test \\$LV -gt \\$memLV; then",
			"\t\t",
			"\t\techo \\$LV > \\$fileWithLV",
			"",
			"\tfi\t ",
			"fi",
			"# ======================",
			"",
			"# echo \"D: lv. \\$LV >> `pwd`\"; ls",
			"",
			"if test \\$DO; then\t   # se il parametro di fare qualcosa in un livello è settato faccio qualcosa",
			"\t",
			"\tif test \\$LV -eq \\$DO; then",
			"\t\techo \"D: inizio la manipolazione al livello \\$DO >> \\$G\"",
			"",
			"\t\t# TODO\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  !!!!!",
			"\t\t$0",
			"",
			"\tfi",
			"fi",
			"",
			"# c'è almeno una directory traversabile",
			"for file in *; do\t# scorro tutti i file presenti nella cartella corrente",
			"\tif test -d \\$file -a -x \\$file; then\t# verifico siano una directory e che sia traversabile",
			"",
			"\t\t\\$0 \\$fileTmp \"`pwd`/\\$file\" `expr \\$LV + 1` \\$DO\t\t# si incrementa a priori la gerarchia, poi si effettua il ricalcolo nella parte iniziale dello script",
			"\tfi",
			"",
			"done"
		]
	}

}
